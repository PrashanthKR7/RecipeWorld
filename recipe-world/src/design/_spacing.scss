$sizeUnit: rem;
$marginKey: 'has-margin';
$spacer:'spacer';
$spacerExtension:'is-';
$paddingKey: 'has-padding';
$separator: '-';
$pm_sizes: (
    ('none', 0),
    ('xxs', 0.125),
    ('xs', 0.25),
    ('sm', 0.5),
    ('md', 1),
    ('lg', 2),
    ('xl', 4),
    ('xxl', 8),
);
$spacersCount: 12;
$spacersInc: 0.5;
$positions: (
    ('top', 'top'),
    ('right', 'right'),
    ('bottom', 'bottom'),
    ('left', 'left')
);

@function sizeValue($key, $value) {
    @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $pm_sizes {
    $sizeKey: nth($size, 1);
    $sizeValue: nth($size, 2);
    .#{$marginKey}#{$separator}#{$sizeKey} {
        margin: sizeValue($sizeKey, $sizeValue);
    }
    .#{$paddingKey}#{$separator}#{$sizeKey} {
        padding: sizeValue($sizeKey, $sizeValue);
    }
    @each $position in $positions {
        $posKey: nth($position, 1);
        $posValue: nth($position, 2);
        .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            margin-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
        .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            padding-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
    }
}


@function sizeValue($key, $value) {
    @return if($key == 'none', 0, $value + $sizeUnit);
}

.#{$spacer} {
    display: block;
    margin: 0;
    padding: 0;
    height: 0;
    background: none;
    border: none;
    &.is-line{
        height: 1px;
        margin: 1rem 0;
        background-color: #d9d9ec
    }

    &.is-centered {
        margin-left: auto;
        margin-right: auto
    }

    @for $i from 1 through $spacersCount {  
        &.#{$spacerExtension}#{$i} { height: #{$i/2}rem };  
    }
}




   


